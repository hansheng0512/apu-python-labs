FUNCTION check_is_code_exist(target_code, target)
  DECLARE String Filename
  DECLARE String Line
  DECLARE File file_object
  IF target == "SUPPLIER" THEN
    Filename = "supplier.txt" 
  ENDIF
  IF target == "HOSPITAL" THEN
    Filename = "hospital.txt"
  ENDIF
  IF target == "ITEM" THEN
    Filename = "ppe.txt"
  ENDIF
  file_object = OPENFILE Filename FOR READ
  FOREACH details IN file_object
    READ details
    details = details.split(",")
    IF details[0] = target_code THEN
      RETURN True
  ENDFOR
  CLOSE Filename
  RETURN False
END


FUNCTION get_input_supplier_code(check_is_exist=False)
  PRINT "Enter supplier code"
  READ supplier_code
  DOWHILE True
    IF supplier_code == "" THEN
      PRINT "Supplier Code cannot be empty"
      PRINT "Enter supplier code"
      READ supplier_code
    ELSE
      IF check_is_exist == True THEN
        is_valid_supplier = CALL check_is_code_exist(supplier_code, "SUPPLIER")
        IF is_valid_supplier THEN
          RETURN supplier_code
        ELSE
          PRINT "Supplier not found"
          PRINT "Enter supplier code"
          READ supplier_code
        ENDIF
      ELSE
        RETURN supplier_code
      ENDIF
    ENDIF
  ENDWHILE
ENDFUNCTION


FUNCTION get_string_input(title)
  PRINT "Enter" + title
  READ string_input
  DOWHILE True
    IF string_input = "" THEN
      PRINT title + "cannot be empty"
      PRINT "Enter" + title
      READ string_input
    ELSE
      RETURN string_input
    ENDIF
  ENDWHILE
ENDFUNCTION


FUNCTION update_supplier_details()
  DECLARE File initial_supplier_file_object
  DECLARE String supplier_code_to_save
  supplier_code = CALL get_input_supplier_code()
  supplier_new_name = CALL get_string_input("New Supplier Name")
  supplier_new_address = CALL get_string_input("New Supplier Address")
  initial_supplier_file_object = OPENFILE "supplier.txt" FOR READ
  DECLARE List initial_supplier_file_object_list
  FOREACH initial_supplier_details IN initial_supplier_file_object
    initial_supplier_details = initial_supplier_details.rstrip()
    initial_supplier_details = initial_supplier_details.split(",")
    supplier_code_to_save = supplier_code
    IF initial_supplier_details[0] = supplier_code THEN
      supplier_name_to_save = supplier_new_name
      supplier_address_to_save = supplier_new_address
    ELSE
      supplier_name_to_save = initial_supplier_details[1]
      supplier_address_to_save = initial_supplier_details[2]
    ENDIF
    APPEND [supplier_code_to_save, supplier_name_to_save, supplier_address_to_save] TO initial_supplier_file_object_list
  ENDFOR
  temp_supplier_file_object = OPENFILE "supplier.txt" FOR WRITE
  FOREACH initial_supplier_file_item IN initial_supplier_file_object_list
    WRITEFILE temp_supplier_file_object, supplier_code_to_save, supplier_name_to_save, supplier_address_to_save
    WRITEFILE "\n"
  ENDFOR
  CLOSE initial_supplier_file_object
  CLOSE temp_supplier_file_object
  PRINT "Profile Updated Successfully"
ENDFUNCTION


FUNCTION sort_and_filter_item_search(supplier_code_list, target_hospital_list, quantity_list, item_code_list)
  DECLARE List supplier_code_list_to_show
  DECLARE List target_hospital_list_to_show
  DECLARE List quantity_list_to_show
  DECLARE List item_code_list_to_show
  DOWHILE LENGTH OF supplier_code_list > 0
    ref1 = supplier_code_list.pop(0)
    ref2 = target_hospital_list.pop(0)
    ref3 = quantity_list.pop(0)
    ref4 = item_code_list.pop(0)
    j = 0
    DOWHILE LENGTH OF supplier_code_list > 0
      data1 = supplier_code_list[j]
      data2 = target_hospital_list[j]
      data3 = quantity_list[j]
      data4 = item_code_list[j]
      IF data1 == ref1 AND data2 == ref2 AND data4 == ref4 THEN
        ref3 = ref3 + data3
        supplier_code_list.pop(j)
        target_hospital_list.pop(j)
        quantity_list.pop(j)
        item_code_list.pop(j)
        CONTINUE
      ENDIF
      j += 1
    ENDDO
    APPEND ref1 TO supplier_code_list_to_show
    APPEND ref2 TO target_hospital_list_to_show
    APPEND ref3 TO quantity_list_to_show
    APPEND ref4 TO item_code_list_to_show
  ENDDO
  index = 0
  FOREACH supplier_code IN supplier_code_list_to_show
    PRINT supplier_code, target_hospital_list_to_show[index], quantity_list_to_show[index], item_code_list_to_show[index]
    index = index + 1
  ENDFOR
ENDFUNCTION


FUNCTION get_input_item_code(check_is_exist = False, add_item = False)
  PRINT "Enter item code"
  READ item_code
  DOWHILE True
    IF item_code == "" THEN
      PRINT "Item code cannot be empty"
      PRINT "Enter item code"
      READ item_code
    ELSE
      IF check_is_exist == True THEN
        is_valid_item = CALL check_is_code_exist(supplier_code, "ITEM")
        IF is_valid_item THEN
          IF add_item THEN
            PRINT "This item already assigned to another supplier"
            PRINT "Enter item code"
            READ item_code
          ELSE
            READ item_code
          ENDIF
        ELSE
          IF add_item THEN
            RETURN item_code
          PRINT "Item not found"
          PRINT "Enter item code"
          READ item_code
        ENDIF
      ELSE
        RETURN item_code
      ENDIF
    ENDIF
  ENDWHILE
ENDFUNCTION


FUNCTION retrieve_item_history()
  supplier_code = CALL get_input_supplier_code()
  item_code = CALL get_input_item_code(True)
  distribution_file_object = OPENFILE "distribution.txt" FOR READ
  DECLARE List supplier_code_list
  DECLARE List target_hospital_list
  DECLARE List item_code_list
  DECLARE List quantity_list
  FOREACH distribution_details IN distribution_file_object
    distribution_details = distribution_details.rstrip()
    distribution_details = distribution_details.split(",")
    IF distribution_details[0] == supplier_code AND distribution_details[2] == item_code
      APPEND distribution_details[0] TO supplier_code_list
      APPEND distribution_details[1] TO target_hospital_list
      APPEND distribution_details[2] TO item_code_list
      APPEND distribution_details[3] TO quantity_list
    ENDIF
  ENDFOR
  CALL sort_and_filter_item_search(supplier_code_list, target_hospital_list, quantity_list, item_code_list)
ENDFUNCTION


FUNCTION update_stock(supplier_code, item_code, new_quantity, action)
  initial_ppe_file_object = OPENFILE "ppe.txt" FOR READ
  DECLARE List initial_ppe_file_object_list
  IF action == "MINUS"
    FOREACH initial_item_details IN initial_ppe_file_object
      initial_item_details = initial_item_details.rstrip()
      initial_item_details = initial_item_details.split(",")
      IF initial_item_details[3] == supplier_code AND initial_item_details[0] == item_code
        final_quantity = initial_item_details[2] - new_quantity
      ELSE
        final_quantity = initial_item_details[2]
      ENDIF
      WRITEFILE temp_supplier_file_object, initial_item_details[0], initial_item_details[1], final_quantity, supplier_code
      WRITEFILE "\n"
    ENDFOR
    temp_ppe_file_object = OPENFILE "supplier.txt" FOR WRITE
    FOREACH initial_item_details IN initial_ppe_file_object
      WRITEFILE temp_supplier_file_object, initial_item_details
      WRITEFILE "\n"
    ENDFOR
  ENDIF
  IF action == "ADD"
    FOREACH initial_item_details IN initial_ppe_file_object
      initial_item_details = initial_item_details.rstrip()
      initial_item_details = initial_item_details.split(",")
      IF initial_item_details[3] == supplier_code AND initial_item_details[0] == item_code
        APPEND initial_item_details[0], initial_item_details[1], str(int(initial_item_details[2]) + new_quantity), supplier_code TO initial_ppe_file_object_list
      ELSE
        APPEND initial_item_details[0], initial_item_details[1], initial_item_details[2], supplier_code TO initial_ppe_file_object_list
      ENDIF
    ENDFOR
    temp_ppe_file_object = OPENFILE "ppe.txt" FOR WRITE
    FOREACH initial_ppe_file_item IN temp_ppe_file_object
      WRITEFILE temp_supplier_file_object, initial_item_details
      WRITEFILE "\n"
    ENDFOR
  ENDIF
  CLOSE initial_ppe_file_object
  CLOSE temp_ppe_file_object
  PRINT "Stock Updated Successfully"
ENDFUNCTION


FUNCTION check_item_stock_is_enough(supplier_code, item_code, quantity_needed)
  ppe_file_object = OPENFILE "ppe.txt" FOR READ
  FOREACH ppe_details IN ppe_file_object
    ppe_details = ppe_details.rstrip()
    ppe_details = ppe_details.split(",")
    IF ppe_details[3] == supplier_code AND ppe_details[0] == item_code
      IF ippe_details[2] < quantity_needed
        RETURN False, ppe_details[2]
      ELSE
        RETURN True, ppe_details[2]
    ENDIF
  ENDFOR
  RETURN False, 0
ENDFUNCTION


FUNCTION get_input_hospital_code(check_is_exist=False)
  PRINT "Enter hospital code"
  READ hospital_code
  DOWHILE True
    IF hospital_code == "" THEN
      PRINT "Hospital code cannot be empty"
      PRINT "Enter hospital code"
      READ hospital_code
    ELSE
      IF check_is_exist == True THEN
        is_valid_hospital = CALL check_is_code_exist(hospital_code, "HOSPITAL")
        IF is_valid_hospital THEN
          RETURN hospital_code
        ELSE
          PRINT "Hospital not found"
          PRINT "Enter hospital code"
          READ hospital_code
        ENDIF
      ELSE
        RETURN hospital_code
      ENDIF
    ENDIF
  ENDWHILE
ENDFUNCTION


FUNCTION get_string_input(title)
  PRINT "Enter" + title
  READ string_input
  DOWHILE True
    IF string_input = "" THEN
      PRINT title + "cannot be empty"
      PRINT "Enter" + title
      READ string_input
    ELSE
      RETURN string_input
    ENDIF
  ENDWHILE
ENDFUNCTION


FUNCTION get_number_input(title)
  PRINT "Enter", title
  READ title
  DOWHILE True
    IF number_input == "" THEN
      PRINT title, "cannot be empty"
      PRINT "Enter", title
    ELSE
      TRY
        number_input = int(number_input)
        RETURN number_input
      EXCEPT
        PRINT title, "must be a number"
        PRINT "Enter", title
    ENDIF
  ENDDO
ENDFUNCTION


FUNCTION distribution_process()
  distribution_file_object = OPENFILE "distribution.txt" FOR APPEND
  supplier_code = CALL get_input_supplier_code(True)
  target_hospital_code = CALL get_input_hospital_code(True)
  item_code = get_input_item_code(True)
  quantity_to_distribute = get_number_input("Quantity to Distribute")
  is_stock_enough, balance = CALL check_item_stock_is_enough(supplier_code, item_code, quantity_to_distribute)
  IF is_stock_enough THEN
    CALL update_stock(supplier_code, item_code, quantity_to_distribute, "MINUS")
    WRITEFILE distribution_file_object, supplier_code, target_hospital_code, item_code, quantity_to_distribute
    WRITEFILE "\n"
  ELSE
    PRINT "Invalid stock, remaining", balance, "only"
  ENDIF
  CLOSE distribution_file_object
ENDFUNCTION


FUNCTION distribution_module()
  distribute_item = True
  DOWHILE distribute_item
    CALL distribution_process()
    continue_ask_confirm = True
    DOWHILE continue_ask_confirm
      PRINT "Want to distribute next item? [0-no 1-yes]"
      IF break_process == "0" OR break_process == "1" THEN
        IF THEN
          continue_ask_confirm = False
          distribute_item = False
        ELSE
          continue_ask_confirm = False
          distribute_item = True
        ENDIF
      ELSE
        continue_ask_confirm = True
        PRINT "Invalid Input, only accept 0 and 1"
      ENDIF
    ENDDO
  ENDDO
ENDFUNCTION


FUNCTION retrieve_all_based_on_supplier(supplier_code, less_than_threshold = False)
  ppe_file_object = OPENFILE "ppe.txt" FOR READ
  DECLARE List item_to_show
  FOREACH ppe_details IN ppe_file_object
    ppe_details = ppe_details.rstrip()
    ppe_details = ppe_details.split(",")
    IF ppe_details[3] == supplier_code THEN
      IF ppe_details[2]) < 25 THEN
        APPEND ppe_details TO item_to_show
      ENDIF
    ELSE
      APPEND ppe_details TO item_to_show
    ENDIF
  ENDFOR
  RETURN item_to_show
ENDFUNCTION


FUNCTION display_item(items_list)
  PRINT "Supplier Code", "Item Code", "Quantity"
  FOREACH item IN items_list
    PRINT item[0], item[1], item[2]
  ENDFOR
ENDFUNCTION


FUNCTION view_stock_less_than_twenty_five()
  supplier_code = CALL get_input_supplier_code()
  items_list = CALL retrieve_all_based_on_supplier(supplier_code, True)
  IF LENGTH OF items_list > 0 THEN
    display_item(items_list)
  ELSE
    PRINT "No Data"
  ENDIF
ENDFUNCTION


FUNCTION view_all_stock()
  supplier_code = CALL get_input_supplier_code()
  items_list = CALL retrieve_all_based_on_supplier(supplier_code)
  IF LENGTH OF items_list > 0 THEN
    display_item(items_list)
  ELSE
    PRINT "No Data"
  ENDIF
ENDFUNCTION


FUNCTION add_item(flexible_quantity)
  supplier_code = CALL get_input_supplier_code(True)
  IF flexible_quantity THEN
    item_code = get_input_item_code(True, False)
  ELSE
    item_name = get_string_input("Item Name")
    item_code = get_input_item_code(True, True)
  ENDIF
  IF flexible_quantity THEN
    item_quantity = CALL get_number_input("Item Quantity")
    PRINT "Added", item_code, "with extra quantity", item_quantity, "to supplier", supplier_code  
    update_stock(supplier_code, item_code, item_quantity, "ADD")
  ELSE
    item_quantity = 100
    PRINT "Added", item_code, "with quantity", item_quantity, "to supplier", supplier_code 
    ppe_file_object = OPENFILE "ppe.txt" FOR APPEND
    WRITEFILE ppe_file_object, item_code, item_name, item_quantity, supplier_code
    WRITEFILE ppe_file_object, "\n"
    CLOSE ppe_file_object
  ENDIF
ENDFUNCTION


FUNCTION inventory_creation(flexible_quantity = False)
  continue_add_item = True
  DOWHILE continue_add_item
    CALL add_item(flexible_quantity)
    continue_ask_confirm = True
    DOWHILE continue_ask_confirm
      PRINT "Want to distribute next item? [0-no 1-yes]"
      IF break_process == "0" OR break_process == "1" THEN
        IF break_process == "0" THEN
          continue_ask_confirm = False
          continue_add_item = False
        ELSE
          continue_ask_confirm = False
          continue_add_item = True
        ENDIF
      ELSE
        continue_ask_confirm = True
        PRINT "Invalid Input, only accept 0 and 1"
      ENDIF
    ENDDO
  ENDDO
ENDFUNCTION


FUNCTION add_supplier(current_supplier)
  PRINT "Insert Supplier", current_supplier,"Details"
  supplier_file_object = OPENFILE "supplier.txt" FOR APPEND
  supplier_code = CALL get_input_supplier_code()
  supplier_name = CALL get_string_input("Supplier Name")
  supplier_address = CALL get_string_input("Supplier Address")
  WRITEFILE supplier_file_object, supplier_code, supplier_name, supplier_address
  WRITEFILE supplier_file_object "\n"
  CLOSE supplier_file_object
  PRINT "Supplier", current_supplier,"Added Successfully\n"
ENDFUNCTION


FUNCTION supplier_registration()
  PRINT "Supplier Registration"
  PRINT "All previous supplier details will be overwritten"
  min_supplier = 3
  max_supplier = 4
  current_supplier = 1
  file_object = OPENFILE "supplier.txt" FOR WRITE
  file_object.close()
  DOWHILE current_supplier <= max_supplier
    CALL add_supplier(current_supplier)
    IF current_supplier == min_supplier THEN
      continue_ask_confirm = True
      DOWHILE continue_ask_confirm
        PRINT "Want to add 4th supplier? [0-no 1-yes]"
        IF break_process == "0" OR break_process == "1" THEN
          IF break_process == "0" THEN
            continue_ask_confirm = False
            current_supplier = 5
          ELSE
            continue_ask_confirm = False
          ENDIF
        ELSE
          continue_ask_confirm = True
          PRINT "Invalid Input, only accept 0 and 1"
        ENDIF
      ENDDO
    ENDIF
  ENDDO
ENDFUNCTION


FUNCTION add_hospital(current_hospital)
  PRINT "Insert Hospital", current_hospital,"Details"
  hospital_file_object = OPENFILE "hospital.txt" FOR APPEND
  hospital_code = CALL get_input_supplier_code()
  hospital_name = CALL get_string_input("Hospital Name")
  hospital_address = CALL get_string_input("Hospital Address")
  WRITEFILE hospital_file_object, hospital_code, hospital_name, hospital_address
  WRITEFILE hospital_file_object "\n"
  CLOSE hospital_file_object
  PRINT "Hospital", current_hospital,"Added Successfully\n"
ENDFUNCTION


FUNCTION hospital_registration()
  PRINT "Supplier Registration"
  PRINT "All previous supplier details will be overwritten"
  min_hospital = 3
  max_hospital = 4
  current_hospital = 1
  file_object = OPENFILE "hospital.txt" FOR WRITE
  file_object.close()
  DOWHILE current_hospital <= max_hospital
    CALL add_hospital(current_hospital)
    IF current_hospital == min_hospital THEN
      continue_ask_confirm = True
      DOWHILE continue_ask_confirm
        PRINT "Want to add 4th hospital? [0-no 1-yes]"
        IF break_process == "0" OR break_process == "1" THEN
          IF break_process == "0" THEN
            continue_ask_confirm = False
            current_supplier = 5
          ELSE
            continue_ask_confirm = False
          ENDIF
        ELSE
          continue_ask_confirm = True
          PRINT "Invalid Input, only accept 0 and 1"
        ENDIF
      ENDDO
    ENDIF
  ENDDO
ENDFUNCTION


FUNCTION main_menu()
  DOWHILE True
    PRINT "Inventory System"
    PRINT "1. Supplier Registration"
    PRINT "2. Hospital Registration"
    PRINT "3. Add New Item for Supplier"
    PRINT "4. View All Stock"
    PRINT "5. View Stock which Less Than 25"
    PRINT "6. Distribute Item to Hospital"
    PRINT "7. Search Item based on Item Code"
    PRINT "8. Supplier Profile Update"
    PRINT "9. Update Supplier Existing Stock"
    PRINT "10. Exit"
    DOWHILE True
      PRINT "Enter Option"
      READ option
      IF 1 <= option <= 10 THEN
        IF option == 1 THEN
          supplier_registration()
        ENDIF
        IF option == 2 THEN
          hospital_registration()
        ENDIF
        IF option == 3 THEN
          inventory_creation()
        ENDIF
        IF option == 4 THEN
          view_all_stock()
        ENDIF
        IF option == 5 THEN
          view_stock_less_than_twenty_five()
        ENDIF
        IF option == 6 THEN
          view_stock_less_than_twenty_five()
        ENDIF
        IF option == 7 THEN
          retrieve_item_history()
        ENDIF
        IF option == 8 THEN
          update_supplier_details()
        ENDIF
        IF option == 9 THEN
          inventory_creation()
        ENDIF
        IF option == 10 THEN
          PRINT "Bye"
          BREAK
        ENDIF
      ELSE
        PRINT "Invalid Option"
      ENDIF
    ENDDO
  ENDDO
ENDFUNCTION


PROGRAM inventory_system
BEGIN
  CALL main_menu()
END